web_PO_v1:
1、编写登陆功能的自动化测试用例 ；
2、运用PO模式
3、分层设计：页面对象和测试用例进行分离；

web_PO_v2:
1、引入单元测试框架。
2、优化分层设计：页面对象、测试用例、测试数据。测试用例层，调用页面对象和测试数据。
3、测试数据层：一个用例类一个测试文件。
4、完成登陆功能的测试用例编写和调试。
5、关于用例调用的先后顺序说明。

web_PO_v3:
1、添加日志模块 - 在整个框架中引用日志；
2、完成投资模块的自动化测试用例编写
3、添加了main.py文件，只要运行此文件，就会加载所有的测试并生成测试报告和日志。
4、等待方法的添加 - 凡是因某一个操作引起页面的内容发生变化，都需要加入等待操作，以确保下一次操作时的元素确实已加载成功。
5、自动化测试的意义在哪里？

web_PO_v4:
1、优化PageObjects模块，提取公共操作的方法到BasePages中。
2、日志模块的优化：添加截图、异常捕获。

web_PO_v5:
1、解决根据自动化测试场景对自动化用例进行自动筛选的问题 -- 引入pytest框架
2、pytest的fixture功能 - 测试用例优化
3、pytest对日志的收集功能 - 生成报告的功能。
4、使用pytest命令参数执行。
5、引入持续集成--jenkins